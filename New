<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Hotel Feedback — Form → LocalStorage → Table + Charts</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Tailwind CSS (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

  <!-- DataTables -->
  <link rel="stylesheet" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.min.css" />
  <script src="https://cdn.datatables.net/2.0.8/js/dataTables.min.js"></script>

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>

  <style>
    /* Minor tweak so DataTables fits Tailwind look a bit better */
    table.dataTable thead th { font-weight: 600; }
    table.dataTable tbody td { vertical-align: top; }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="max-w-6xl mx-auto p-4 md:p-8">
    <header class="mb-6">
      <h1 class="text-2xl md:text-3xl font-bold text-gray-800">Hotel Customer Feedback</h1>
      <p class="text-gray-600">Fill the form, we’ll store it locally and visualize results in a table & charts.</p>
    </header>

    <!-- CARD: FORM -->
    <section class="bg-white rounded-2xl shadow p-4 md:p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Feedback Form</h2>

      <form id="feedbackForm" class="grid grid-cols-1 md:grid-cols-2 gap-4"></form>

      <div class="flex items-center gap-3 mt-4">
        <button id="submitBtn" class="px-5 py-2 rounded-2xl bg-indigo-600 text-white hover:bg-indigo-700 active:scale-95 transition">Submit</button>
        <button id="resetBtn" type="button" class="px-5 py-2 rounded-2xl bg-gray-200 text-gray-800 hover:bg-gray-300 active:scale-95 transition">Reset Form</button>
        <button id="clearAllBtn" type="button" class="ml-auto px-5 py-2 rounded-2xl bg-rose-600 text-white hover:bg-rose-700 active:scale-95 transition">Clear All Data</button>
      </div>
      <p id="message" class="mt-3 text-sm"></p>
    </section>

    <!-- CARD: TABLE -->
    <section class="bg-white rounded-2xl shadow p-4 md:p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Submissions</h2>
      <div class="overflow-auto">
        <table id="submissionsTable" class="display stripe hover w-full"></table>
      </div>
    </section>

    <!-- CARD: CHARTS -->
    <section class="bg-white rounded-2xl shadow p-4 md:p-6">
      <h2 class="text-xl font-semibold text-gray-800 mb-4">Charts</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="p-4 border rounded-xl">
          <h3 class="font-semibold text-gray-700 mb-3">Facilities Usage (Pie)</h3>
          <canvas id="facilitiesPie"></canvas>
        </div>
        <div class="p-4 border rounded-xl">
          <h3 class="font-semibold text-gray-700 mb-3">Overall Rating Distribution (Bar)</h3>
          <canvas id="ratingBar"></canvas>
        </div>
      </div>
    </section>
  </div>

  <script>
    // --------- CONFIG: Form Definition (your provided spec) ----------
    const formData = [
      { "title": "First Name", "id": "fname", "inputType": "text", "mandatory": true, "enable": true },
      { "title": "Last Name", "id": "lname", "inputType": "text", "mandatory": true, "enable": true },
      { "title": "Email", "id": "email", "inputType": "text", "mandatory": true, "enable": true },
      { "title": "Phone Number", "id": "phoneNum", "inputType": "number", "mandatory": true, "enable": true },
      {
        "title": "Gender", "id": "gender", "inputType": "select", "mandatory": true, "enable": true,
        "options": [
          { "text": "Male", "value": "male" },
          { "text": "Female", "value": "female" },
          { "text": "Other", "value": "other" }
        ]
      },
      {
        "title": "Room Type", "id": "roomType", "inputType": "select", "mandatory": true, "enable": true,
        "options": [
          { "text": "Standard", "value": "standard" },
          { "text": "Deluxe", "value": "deluxe" },
          { "text": "Suite", "value": "suite" }
        ]
      },
      { "title": "Number of Nights", "id": "nights", "inputType": "number", "mandatory": true, "enable": true },
      {
        "title": "Facilities Used", "id": "facilities", "inputType": "multiselect", "mandatory": true, "enable": true,
        "options": [
          { "text": "Free WiFi", "value": "wifi" },
          { "text": "Swimming Pool", "value": "pool" },
          { "text": "Spa", "value": "spa" },
          { "text": "Gym", "value": "gym" },
          { "text": "Restaurant", "value": "restaurant" }
        ]
      },
      {
        "title": "Overall Rating", "id": "overallRating", "inputType": "select", "mandatory": true, "enable": true,
        "options": [
          { "text": "1 - Very Poor", "value": 1 },
          { "text": "2 - Poor", "value": 2 },
          { "text": "3 - Average", "value": 3 },
          { "text": "4 - Good", "value": 4 },
          { "text": "5 - Excellent", "value": 5 }
        ]
      },
      { "title": "Comments", "id": "comments", "inputType": "textarea", "mandatory": false, "enable": true },
      { "title": "Accept Terms", "id": "terms", "inputType": "checkbox", "mandatory": true, "enable": true }
    ];

    // --------- UTILITIES (Reusable, object-style params, try/catch) ----------
    const STORAGE_KEY = 'hotelFeedback';

    function setMessage({ text = '', type = 'info' }) {
      const $msg = $('#message');
      const color = {
        info: 'text-gray-700',
        success: 'text-green-700',
        error: 'text-red-700',
        warn: 'text-amber-700'
      }[type] || 'text-gray-700';
      $msg.attr('class', `mt-3 text-sm ${color}`).text(text);
    }

    function safeParseJSON({ raw, fallback = [] }) {
      try {
        return JSON.parse(raw);
      } catch {
        return fallback;
      }
    }

    function getLocalData() {
      try {
        const data = localStorage.getItem(STORAGE_KEY);
        return data ? safeParseJSON({ raw: data, fallback: [] }) : [];
      } catch (err) {
        console.error('getLocalData error:', err);
        setMessage({ text: 'Unable to read LocalStorage.', type: 'error' });
        return [];
      }
    }

    function setLocalData({ list }) {
      try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(list));
        return true;
      } catch (err) {
        console.error('setLocalData error:', err);
        setMessage({ text: 'Unable to save to LocalStorage.', type: 'error' });
        return false;
      }
    }

    function clearLocalData() {
      try {
        localStorage.removeItem(STORAGE_KEY);
        return true;
      } catch (err) {
        console.error('clearLocalData error:', err);
        setMessage({ text: 'Unable to clear LocalStorage.', type: 'error' });
        return false;
      }
    }

    // --------- FORM RENDERING ----------
    function renderField({ field }) {
      const base = 'w-full rounded-xl border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:bg-gray-100';
      const disabled = field.enable ? '' : 'disabled';

      if (field.inputType === 'text' || field.inputType === 'number') {
        return `
          <label class="block">
            <span class="block text-sm font-medium text-gray-700 mb-1">${field.title}${field.mandatory ? ' *' : ''}</span>
            <input id="${field.id}" type="${field.inputType}" ${disabled} class="${base}" />
          </label>`;
      }

      if (field.inputType === 'textarea') {
        return `
          <label class="block md:col-span-2">
            <span class="block text-sm font-medium text-gray-700 mb-1">${field.title}${field.mandatory ? ' *' : ''}</span>
            <textarea id="${field.id}" rows="3" ${disabled} class="${base}"></textarea>
          </label>`;
      }

      if (field.inputType === 'select') {
        const options = (field.options || []).map(opt => `<option value="${opt.value}">${opt.text}</option>`).join('');
        return `
          <label class="block">
            <span class="block text-sm font-medium text-gray-700 mb-1">${field.title}${field.mandatory ? ' *' : ''}</span>
            <select id="${field.id}" ${disabled} class="${base}">
              <option value="">Select...</option>
              ${options}
            </select>
          </label>`;
      }

      if (field.inputType === 'multiselect') {
        const items = (field.options || []).map((opt, idx) => {
          const cid = `${field.id}_${idx}`;
          return `
            <label class="flex items-center gap-2">
              <input type="checkbox" value="${opt.value}" data-group="${field.id}" id="${cid}" class="h-4 w-4" />
              <span>${opt.text}</span>
            </label>`;
        }).join('');
        return `
          <div class="md:col-span-2">
            <span class="block text-sm font-medium text-gray-700 mb-2">${field.title}${field.mandatory ? ' *' : ''}</span>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-2">${items}</div>
          </div>`;
      }

      if (field.inputType === 'checkbox') {
        return `
          <div class="md:col-span-2">
            <label class="inline-flex items-center gap-2">
              <input id="${field.id}" type="checkbox" ${disabled} class="h-4 w-4" />
              <span>${field.title}${field.mandatory ? ' *' : ''}</span>
            </label>
          </div>`;
      }

      return '';
    }

    function renderForm({ fields }) {
      const $form = $('#feedbackForm');
      $form.empty();
      fields.forEach(f => $form.append(renderField({ field: f })));
    }

    // --------- VALIDATION & COLLECTION ----------
    function validate({ fields }) {
      const errors = [];

      const getVal = id => {
        const el = document.getElementById(id);
        if (!el) return '';
        if (el.type === 'checkbox') return el.checked;
        return el.value?.trim?.() ?? '';
      };

      fields.forEach(f => {
        if (!f.mandatory) return;

        if (f.inputType === 'multiselect') {
          const selected = $(`input[type="checkbox"][data-group="${f.id}"]:checked`).map((_, el) => el.value).get();
          if (selected.length === 0) errors.push(`${f.title} is required`);
        } else if (f.inputType === 'checkbox') {
          const v = getVal(f.id);
          if (!v) errors.push(`${f.title} must be accepted`);
        } else {
          const v = getVal(f.id);
          if (v === '') errors.push(`${f.title} is required`);
          if (f.id === 'email' && v) {
            const ok = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);
            if (!ok) errors.push('Email is invalid');
          }
          if (f.id === 'phoneNum' && v) {
            const ok = /^[0-9]{7,15}$/.test(v);
            if (!ok) errors.push('Phone Number should be 7–15 digits');
          }
          if (f.id === 'nights' && v) {
            const num = Number(v);
            if (!(num > 0 && Number.isFinite(num))) errors.push('Number of Nights must be a positive number');
          }
        }
      });

      return { valid: errors.length === 0, errors };
    }

    function collectValues({ fields }) {
      const values = {};
      fields.forEach(f => {
        if (f.inputType === 'multiselect') {
          values[f.id] = $(`input[type="checkbox"][data-group="${f.id}"]:checked`).map((_, el) => el.value).get();
        } else if (f.inputType === 'checkbox') {
          values[f.id] = $(`#${f.id}`).is(':checked');
        } else {
          values[f.id] = $(`#${f.id}`).val()?.trim() ?? '';
        }
      });
      return values;
    }

    // Map flat form values → complex JSON object for storage
    function toPayload({ v }) {
      const timestamp = new Date().toISOString();
      return {
        customer: {
          name: `${v.fname} ${v.lname}`.trim(),
          email: v.email,
          phone: v.phoneNum
        },
        stayDetails: {
          roomType: v.roomType,
          nights: Number(v.nights),
          gender: v.gender
        },
        feedback: {
          overallRating: Number(v.overallRating),
          comments: v.comments || ''
        },
        facilities: v.facilities || [],
        meta: {
          submittedAt: timestamp,
          termsAccepted: !!v.terms
        }
      };
    }

    function resetForm() {
      $('#feedbackForm')[0].reset();
      // Also uncheck all multiselect checkboxes explicitly
      $('input[type="checkbox"][data-group]').prop('checked', false);
    }

    // --------- DATATABLE ----------
    let dt = null;
    function initTable() {
      const columns = [
        { title: 'Name', data: 'customer.name' },
        { title: 'Email', data: 'customer.email' },
        { title: 'Phone', data: 'customer.phone' },
        { title: 'Gender', data: 'stayDetails.gender' },
        { title: 'Room Type', data: 'stayDetails.roomType' },
        { title: 'Nights', data: 'stayDetails.nights' },
        {
          title: 'Facilities',
          data: 'facilities',
          render: (arr) => Array.isArray(arr) ? arr.join(', ') : ''
        },
        { title: 'Rating', data: 'feedback.overallRating' },
        { title: 'Comments', data: 'feedback.comments' },
        { title: 'Submitted At', data: 'meta.submittedAt',
          render: (iso) => new Date(iso).toLocaleString()
        }
      ];

      dt = new DataTable('#submissionsTable', {
        data: getLocalData(),
        columns,
        responsive: true,
        pageLength: 5,
        order: [[9, 'desc']]
      });
    }

    function refreshTable() {
      try {
        const rows = getLocalData();
        dt.clear();
        dt.rows.add(rows).draw();
      } catch (err) {
        console.error('refreshTable error:', err);
        setMessage({ text: 'Table update failed.', type: 'error' });
      }
    }

    // --------- CHARTS ----------
    let facilitiesPieChart = null;
    let ratingBarChart = null;

    function aggregateFacilities({ list }) {
      const map = {};
      list.forEach(item => {
        (item.facilities || []).forEach(f => { map[f] = (map[f] || 0) + 1; });
      });
      return map; // { wifi: 3, pool: 2, ... }
    }

    function aggregateRatings({ list }) {
      const buckets = { 1:0, 2:0, 3:0, 4:0, 5:0 };
      list.forEach(item => {
        const r = Number(item.feedback?.overallRating);
        if (buckets[r] !== undefined) buckets[r] += 1;
      });
      return buckets; // {1: n1, ... 5: n5}
    }

    function drawFacilitiesPie() {
      try {
        const data = getLocalData();
        const agg = aggregateFacilities({ list: data });
        const labels = Object.keys(agg);
        const values = Object.values(agg);

        const ctx = document.getElementById('facilitiesPie').getContext('2d');
        if (facilitiesPieChart) facilitiesPieChart.destroy();

        facilitiesPieChart = new Chart(ctx, {
          type: 'pie',
          data: {
            labels,
            datasets: [{ data: values }]
          },
          options: {
            plugins: {
              legend: { position: 'bottom' },
              tooltip: { enabled: true }
            }
          }
        });
      } catch (err) {
        console.error('drawFacilitiesPie error:', err);
        setMessage({ text: 'Failed to render facilities chart.', type: 'error' });
      }
    }

    function drawRatingBar() {
      try {
        const data = getLocalData();
        const agg = aggregateRatings({ list: data });
        const labels = ['1', '2', '3', '4', '5'];
        const values = labels.map(k => agg[k] || 0);

        const ctx = document.getElementById('ratingBar').getContext('2d');
        if (ratingBarChart) ratingBarChart.destroy();

        ratingBarChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels,
            datasets: [{ label: 'Count', data: values }]
          },
          options: {
            scales: { y: { beginAtZero: true, ticks: { precision: 0 } } },
            plugins: {
              legend: { display: false },
              tooltip: { enabled: true }
            }
          }
        });
      } catch (err) {
        console.error('drawRatingBar error:', err);
        setMessage({ text: 'Failed to render rating chart.', type: 'error' });
      }
    }

    function refreshCharts() {
      drawFacilitiesPie();
      drawRatingBar();
    }

    // --------- SUBMISSION FLOW ----------
    function handleSubmit(e) {
      e.preventDefault();
      try {
        const check = validate({ fields: formData });
        if (!check.valid) {
          setMessage({ text: 'Fix errors: ' + check.errors.join('; '), type: 'error' });
          return;
        }

        const values = collectValues({ fields: formData });
        const payload = toPayload({ v: values });

        const list = getLocalData();
        list.push(payload);

        if (!setLocalData({ list })) return;

        refreshTable();
        refreshCharts();
        resetForm();
        setMessage({ text: 'Submission saved successfully ✅', type: 'success' });
      } catch (err) {
        console.error('handleSubmit error:', err);
        setMessage({ text: 'Unexpected error while submitting.', type: 'error' });
      }
    }

    function handleReset() {
      try {
        resetForm();
        setMessage({ text: 'Form cleared.', type: 'info' });
      } catch (err) {
        console.error('handleReset error:', err);
        setMessage({ text: 'Unable to reset the form.', type: 'error' });
      }
    }

    function handleClearAll() {
      try {
        if (!confirm('This will remove all saved submissions. Continue?')) return;
        if (clearLocalData()) {
          refreshTable();
          refreshCharts();
          setMessage({ text: 'All saved data cleared.', type: 'warn' });
        }
      } catch (err) {
        console.error('handleClearAll error:', err);
        setMessage({ text: 'Unable to clear data.', type: 'error' });
      }
    }

    // --------- INIT ----------
    $(document).ready(function () {
      renderForm({ fields: formData });
      initTable();
      refreshCharts();

      $('#submitBtn').on('click', handleSubmit);
      $('#resetBtn').on('click', handleReset);
      $('#clearAllBtn').on('click', handleClearAll);

      // Live validation (optional, lightweight)
      $(document).on('change', 'input, select, textarea', function () {
        setMessage({ text: '' });
      });
    });
  </script>
</body>
</html>
